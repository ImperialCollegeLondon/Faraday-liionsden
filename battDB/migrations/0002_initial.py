# Generated by Django 3.2.7 on 2021-09-09 09:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('dfndb', '0001_initial'),
        ('common', '0001_initial'),
        ('battDB', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='signaltype',
            name='parameter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dfndb.parameter'),
        ),
        migrations.AddField(
            model_name='signaltype',
            name='parser',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='columns', to='battDB.parser'),
        ),
        migrations.AddField(
            model_name='parser',
            name='parameters',
            field=models.ManyToManyField(through='battDB.SignalType', to='dfndb.Parameter'),
        ),
        migrations.AddField(
            model_name='parser',
            name='user_owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='experimentdevice',
            name='batch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='battDB.batch'),
        ),
        migrations.AddField(
            model_name='experimentdevice',
            name='data_file',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='battDB.experimentdatafile'),
        ),
        migrations.AddField(
            model_name='experimentdevice',
            name='experiment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='battDB.experiment'),
        ),
        migrations.AddField(
            model_name='experimentdatafile',
            name='devices',
            field=models.ManyToManyField(related_name='used_in', through='battDB.ExperimentDevice', to='battDB.Batch'),
        ),
        migrations.AddField(
            model_name='experimentdatafile',
            name='experiment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='data_files', to='battDB.experiment'),
        ),
        migrations.AddField(
            model_name='experimentdatafile',
            name='machine',
            field=models.ForeignKey(blank=True, help_text='Equipment on which this data was recorded', null=True, on_delete=django.db.models.deletion.SET_NULL, to='battDB.equipment'),
        ),
        migrations.AddField(
            model_name='experimentdatafile',
            name='protocol',
            field=models.ForeignKey(blank=True, help_text='Test protocol used in this experiment', limit_choices_to={'type': 2000}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dfndb.method'),
        ),
        migrations.AddField(
            model_name='experimentdatafile',
            name='user_owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='experiment',
            name='config',
            field=models.ForeignKey(blank=True, help_text='All devices in the same experiment must be of the same configuration, i.e. an experiment must use all single cells, or all 2s2p modules, not a mixture of both.', limit_choices_to={'config_type': 'expmt'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='used_in', to='battDB.deviceconfig'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='user_owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='equipment',
            name='default_parser',
            field=models.ForeignKey(blank=True, help_text="Default parser for this equipment's data", null=True, on_delete=django.db.models.deletion.SET_NULL, to='battDB.parser'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='manufacturer',
            field=models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='common.org'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='specification',
            field=models.ForeignKey(help_text='Batch Specification', limit_choices_to={'abstract': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='battDB.devicespecification'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='user_owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='devicespecification',
            name='device_type',
            field=models.ForeignKey(blank=True, help_text='Device type. e.g. Cell, Module, Battery Pack. An abstract \n        specification cannot have a device type -  they define the device types.', limit_choices_to={'abstract': True}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='specifies', to='battDB.devicespecification'),
        ),
        migrations.AddField(
            model_name='devicespecification',
            name='parameters',
            field=models.ManyToManyField(through='battDB.DeviceParameter', to='dfndb.Parameter'),
        ),
        migrations.AddField(
            model_name='devicespecification',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, help_text='Parent node in object tree hierarchy', null=True, on_delete=django.db.models.deletion.SET_NULL, to='battDB.devicespecification'),
        ),
        migrations.AddField(
            model_name='devicespecification',
            name='user_owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='deviceparameter',
            name='material',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dfndb.material'),
        ),
        migrations.AddField(
            model_name='deviceparameter',
            name='parameter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dfndb.parameter'),
        ),
        migrations.AddField(
            model_name='deviceparameter',
            name='spec',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='battDB.devicespecification'),
        ),
        migrations.AddField(
            model_name='deviceconfignode',
            name='config',
            field=models.ForeignKey(help_text='Config instance to which this node belongs', on_delete=django.db.models.deletion.CASCADE, to='battDB.deviceconfig'),
        ),
        migrations.AddField(
            model_name='deviceconfignode',
            name='device',
            field=models.ForeignKey(help_text='Related device specification e.g. cell or sensor.', limit_choices_to={'abstract': True}, on_delete=django.db.models.deletion.CASCADE, to='battDB.devicespecification'),
        ),
        migrations.AddField(
            model_name='deviceconfig',
            name='devices',
            field=models.ManyToManyField(through='battDB.DeviceConfigNode', to='battDB.DeviceSpecification'),
        ),
        migrations.AddField(
            model_name='deviceconfig',
            name='user_owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='device',
            name='batch',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='battDB.batch'),
        ),
        migrations.AddField(
            model_name='datarange',
            name='dataFile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ranges', to='battDB.experimentdatafile'),
        ),
        migrations.AddField(
            model_name='datacolumn',
            name='data_file',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='battDB.experimentdatafile'),
        ),
        migrations.AddField(
            model_name='datacolumn',
            name='device',
            field=models.ForeignKey(blank=True, help_text='Device id for parameter mapping', null=True, on_delete=django.db.models.deletion.SET_NULL, to='battDB.experimentdevice'),
        ),
        migrations.AddField(
            model_name='datacolumn',
            name='parameter',
            field=models.ForeignKey(blank=True, help_text='Map this column to a parameter on a device', null=True, on_delete=django.db.models.deletion.SET_NULL, to='dfndb.parameter'),
        ),
        migrations.AddField(
            model_name='batch',
            name='manufacturer',
            field=models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='common.org'),
        ),
        migrations.AddField(
            model_name='batch',
            name='manufacturing_protocol',
            field=models.ForeignKey(blank=True, help_text='Test protocol used in this experiment', limit_choices_to={'type': 3000}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dfndb.method'),
        ),
        migrations.AddField(
            model_name='batch',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, help_text='Parent node in object tree hierarchy', null=True, on_delete=django.db.models.deletion.SET_NULL, to='battDB.batch'),
        ),
        migrations.AddField(
            model_name='batch',
            name='specification',
            field=models.ForeignKey(help_text='Batch Specification', limit_choices_to={'abstract': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='battDB.devicespecification'),
        ),
        migrations.AddField(
            model_name='batch',
            name='user_owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='experimentdevice',
            unique_together={('device_position', 'data_file'), ('experiment', 'batch', 'batch_sequence', 'data_file')},
        ),
        migrations.AlterUniqueTogether(
            name='deviceparameter',
            unique_together={('spec', 'name'), ('spec', 'parameter', 'material')},
        ),
        migrations.AlterUniqueTogether(
            name='device',
            unique_together={('batch', 'seq_num')},
        ),
        migrations.AlterUniqueTogether(
            name='datarange',
            unique_together={('dataFile', 'label')},
        ),
        migrations.AlterUniqueTogether(
            name='datacolumn',
            unique_together={('column_name', 'data_file'), ('device', 'data_file')},
        ),
    ]
