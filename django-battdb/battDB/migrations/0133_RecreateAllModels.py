# Generated by Django 3.1.2 on 2020-10-31 16:25

import datetime
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('dfndb', '0035_ParamMeta'),
        ('common', '0049_Bork'),
        ('battDB', '0132_Bork'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataColumn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signal_name', models.CharField(max_length=20)),
                ('batch_id', models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Column Mapping',
                'verbose_name_plural': 'Data Column Mappings to Device Parameters',
            },
        ),
        migrations.CreateModel(
            name='DeviceBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(10, 'Draft'), (20, 'Submitted'), (30, 'Accepted'), (40, 'Published'), (50, 'Deleted')], default=10)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('attributes', models.JSONField(blank=True, default=dict, help_text='Optional machine-readable JSON metadata')),
                ('notes', models.TextField(blank=True, help_text='Optional human-readable notes', null=True)),
                ('slug', models.SlugField(default='autogenerated', editable=False, help_text='Auto-generated unique name, can be used in URLs')),
                ('serialNo', models.CharField(blank=True, default='', help_text='Batch number, optionally indicate serial number format', max_length=60)),
                ('batch_size', models.PositiveSmallIntegerField(default=1)),
                ('manufactured_on', models.DateField(default=datetime.datetime.now)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('manufacturer', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='common.org')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='Parent node in object tree hierarchy', null=True, on_delete=django.db.models.deletion.SET_NULL, to='battDB.devicebatch')),
            ],
            options={
                'verbose_name': 'Device or Batch',
                'verbose_name_plural': 'Devices',
            },
        ),
        migrations.CreateModel(
            name='DeviceConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(10, 'Draft'), (20, 'Submitted'), (30, 'Accepted'), (40, 'Published'), (50, 'Deleted')], default=10)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('attributes', models.JSONField(blank=True, default=dict, help_text='Optional machine-readable JSON metadata')),
                ('notes', models.TextField(blank=True, help_text='Optional human-readable notes', null=True)),
                ('slug', models.SlugField(default='autogenerated', editable=False, help_text='Auto-generated unique name, can be used in URLs')),
            ],
            options={
                'verbose_name_plural': 'Device Configurations',
            },
        ),
        migrations.CreateModel(
            name='DeviceParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('value', models.JSONField(blank=True, null=True)),
                ('material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dfndb.material')),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dfndb.parameter')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceSpecification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(10, 'Draft'), (20, 'Submitted'), (30, 'Accepted'), (40, 'Published'), (50, 'Deleted')], default=10)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('attributes', models.JSONField(blank=True, default=dict, help_text='Optional machine-readable JSON metadata')),
                ('notes', models.TextField(blank=True, help_text='Optional human-readable notes', null=True)),
                ('slug', models.SlugField(default='autogenerated', editable=False, help_text='Auto-generated unique name, can be used in URLs')),
                ('abstract', models.BooleanField(default=False, help_text="This specifies an abstract device, e.g. 'Cell' with child members such as'Positive Electrode, Negative Electrode, Electrolyte etc. <BR>If this is set to True, then all metadata declared here must be overridden in child classes. An abstract specification cannot be used to define a physical device or batch.", verbose_name='Abstract Specification')),
                ('complete', models.BooleanField(default=False, help_text='This device is complete - it can be used in experiments without a parent')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('device_type', models.ForeignKey(blank=True, help_text='Device type. e.g. Cell, Module, Battery Pack. <BR>An abstract specification cannot have a device type - they define the device types.', limit_choices_to={'abstract': True}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='specifies', to='battDB.devicespecification')),
                ('parameters', models.ManyToManyField(through='battDB.DeviceParameter', to='dfndb.Parameter')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='Parent node in object tree hierarchy', null=True, on_delete=django.db.models.deletion.SET_NULL, to='battDB.devicespecification')),
                ('user_owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Device Specifications',
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(10, 'Draft'), (20, 'Submitted'), (30, 'Accepted'), (40, 'Published'), (50, 'Deleted')], default=10)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('attributes', models.JSONField(blank=True, default=dict, help_text='Optional machine-readable JSON metadata')),
                ('notes', models.TextField(blank=True, help_text='Optional human-readable notes', null=True)),
                ('slug', models.SlugField(default='autogenerated', editable=False, help_text='Auto-generated unique name, can be used in URLs')),
                ('date', models.DateField(default=datetime.datetime.now)),
                ('device', models.ForeignKey(blank=True, limit_choices_to={'abstract': False, 'complete': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='used_in', to='battDB.devicespecification')),
                ('protocol', models.ForeignKey(blank=True, limit_choices_to={'type': 2000}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dfndb.method')),
                ('user_owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'dataset',
                'verbose_name_plural': 'Experiments',
            },
        ),
        migrations.CreateModel(
            name='ExperimentDataFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.PositiveSmallIntegerField(choices=[(10, 'Draft'), (20, 'Submitted'), (30, 'Accepted'), (40, 'Published'), (50, 'Deleted')], default=10)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('attributes', models.JSONField(blank=True, default=dict, help_text='Optional machine-readable JSON metadata')),
                ('notes', models.TextField(blank=True, help_text='Optional human-readable notes', null=True)),
                ('slug', models.SlugField(default='autogenerated', editable=False, help_text='Auto-generated unique name, can be used in URLs')),
                ('raw_data_file', models.FileField(null=True, upload_to='raw_data_files')),
                ('file_hash', models.CharField(max_length=64, null=True, unique=True)),
                ('parsed_data', models.JSONField(default=dict, editable=False)),
                ('experiment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='data_files', to='battDB.experiment')),
                ('mappings', models.ManyToManyField(blank=True, related_name='data_files', through='battDB.DataColumn', to='battDB.DeviceBatch')),
                ('user_owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'dataset',
                'verbose_name_plural': 'Data Files',
            },
        ),
        migrations.AddField(
            model_name='deviceparameter',
            name='spec',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='battDB.devicespecification'),
        ),
        migrations.CreateModel(
            name='DeviceConfigNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_position_id', models.CharField(blank=True, help_text='Position of device in pack e.g. 1 - identifies this device', max_length=20, null=True)),
                ('device_terminal_name', models.CharField(blank=True, help_text="Name of device port or terminal. e.g. 'Anode'", max_length=10, null=True)),
                ('net_name', models.CharField(blank=True, help_text='Name of electrical signal e.g. cell_1_v', max_length=20, null=True)),
                ('config', models.ForeignKey(help_text='Config instance to which this node belongs', on_delete=django.db.models.deletion.CASCADE, to='battDB.deviceconfig')),
                ('device', models.ForeignKey(help_text='Related device specification e.g. cell or sensor. Must have is_template=True', limit_choices_to={'abstract': False}, on_delete=django.db.models.deletion.CASCADE, to='battDB.devicespecification')),
                ('next', models.ForeignKey(blank=True, help_text='Connected node in chain. Must be part of the same config.In a series pack, this would be the negative terminal of the next cell', null=True, on_delete=django.db.models.deletion.SET_NULL, to='battDB.deviceconfignode')),
            ],
        ),
        migrations.AddField(
            model_name='deviceconfig',
            name='devices',
            field=models.ManyToManyField(through='battDB.DeviceConfigNode', to='battDB.DeviceSpecification'),
        ),
        migrations.AddField(
            model_name='deviceconfig',
            name='user_owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='devicebatch',
            name='specification',
            field=models.ForeignKey(blank=True, help_text='Batch Specification', limit_choices_to={'abstract': False}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='battDB.devicespecification'),
        ),
        migrations.AddField(
            model_name='devicebatch',
            name='user_owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DataRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(10, 'Draft'), (20, 'Submitted'), (30, 'Accepted'), (40, 'Published'), (50, 'Deleted')], default=10)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_on', models.DateTimeField(auto_now=True)),
                ('attributes', models.JSONField(blank=True, default=dict, help_text='Optional machine-readable JSON metadata')),
                ('notes', models.TextField(blank=True, help_text='Optional human-readable notes', null=True)),
                ('slug', models.SlugField(default='autogenerated', editable=False, help_text='Auto-generated unique name, can be used in URLs')),
                ('file_offset', models.PositiveIntegerField(default=0)),
                ('label', models.CharField(max_length=32, null=True)),
                ('protocol_step', models.PositiveIntegerField()),
                ('step_action', models.CharField(choices=[('chg', 'Charging'), ('dchg', 'Discharging'), ('rest', 'Rest'), (None, 'Undefined')], max_length=8, null=True)),
                ('ts_headers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=32, null=True), blank=True, null=True, size=None)),
                ('ts_data', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(null=True), null=True, size=None), blank=True, null=True, size=None)),
                ('dataFile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ranges', to='battDB.experimentdatafile')),
                ('user_owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Data Ranges',
            },
        ),
        migrations.AddField(
            model_name='datacolumn',
            name='data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='battDB.experimentdatafile'),
        ),
        migrations.AddField(
            model_name='datacolumn',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='battDB.devicebatch'),
        ),
        migrations.AddField(
            model_name='datacolumn',
            name='parameter',
            field=models.ForeignKey(default=4, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dfndb.parameter'),
        ),
        migrations.AlterUniqueTogether(
            name='deviceparameter',
            unique_together={('spec', 'name'), ('spec', 'parameter', 'material')},
        ),
        migrations.AlterUniqueTogether(
            name='datacolumn',
            unique_together={('device', 'data', 'batch_id')},
        ),
        migrations.CreateModel(
            name='BatchDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attributes', models.JSONField(blank=True, default=dict, help_text='Optional machine-readable JSON metadata')),
                ('batch_index', models.PositiveSmallIntegerField(default=1)),
                ('serialNo', models.CharField(blank=True, default='', help_text='Serial Number', max_length=60)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='battDB.devicebatch')),
            ],
            options={
                'unique_together': {('batch', 'batch_index')},
            },
        ),
    ]
